import yt_dlpimport whisperimport redef download_audio(url, output_file):    ydl_opts = {        'format': 'bestaudio/best',        'postprocessors': [{            'key': 'FFmpegExtractAudio',            'preferredcodec': 'mp3',            'preferredquality': '192',        }],        'outtmpl': output_file,    }    with yt_dlp.YoutubeDL(ydl_opts) as ydl:        ydl.download([url])youtube_url = input("Enter the valid URL of the YouTube video: ")youtube_pattern = re.compile(    r'^(https?:\/\/)?(www\.)?(youtube\.com|youtu\.?be)\/(watch\?v=)?([a-zA-Z0-9_-]{11})$')if not youtube_pattern.match(youtube_url):    print("The URL is not valid.")    exit(-1)download_audio(youtube_url, 'audio')model = whisper.load_model("base")def generate_subtitles(audio_file, output_file):    model = whisper.load_model("base")    result = model.transcribe(audio_file)    with open(output_file, 'w', encoding='utf-8') as f:        for segment in result['segments']:            start = segment['start']            end = segment['end']            text = segment['text']            f.write(f"{segment['id'] + 1}\n")            f.write(f"{format_timestamp(start)} --> {format_timestamp(end)}\n")            f.write(f"{text}\n\n")def format_timestamp(seconds):    hours = int(seconds // 3600)    minutes = int((seconds % 3600) // 60)    seconds = int(seconds % 60)    milliseconds = int((seconds - int(seconds)) * 1000)    return f"{hours:02}:{minutes:02}:{seconds:02},{milliseconds:03}"audio_file = 'Audio/audio.mp3'output_file = 'strs/subtitles.srt'generate_subtitles(audio_file, output_file)